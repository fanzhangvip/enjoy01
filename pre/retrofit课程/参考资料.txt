https://juejin.im/post/5af0335c6fb9a07ace58cc8f
https://www.ibm.com/developerworks/cn/java/j-lo-proxy-pattern/index.html
https://segmentfault.com/a/1190000022258194
https://www.kancloud.cn/aslai/interview-guide/1126403、
https://www.zhihu.com/question/20794107

https://blog.csdn.net/u013132758/article/details/79690882
https://blog.csdn.net/lmj623565791/article/details/51304204
https://blog.csdn.net/ustcrding/article/details/53185801


新
https://www.jianshu.com/u/fae653b0f13d
https://www.zhihu.com/question/20794107
https://zhuanlan.zhihu.com/p/23025818

OkHttp框架简介
Android为我们提供了两种HTTP交互的方式：HttpURLConnection和 Apache HTTP Client，虽然两者都支持HTTPS，流的上传和下载，配置超时，IPv6和连接池，已足够满足我们各种HTTP请求的需求。但更高效的使用HTTP可以让您的应用运行更快、更节省流量。而OkHttp库就是为此而生。

OKHttp是一款高效的HTTP库，支持连接同一地址的链接共享同一个socket，通过连接池来减小响应延迟，还有透明的GZIP压缩，请求缓存等优势。OkHttp存在以下的特点：

① 支持HTTP2/SPDY

② socket自动选择最好路线，并支持自动重连

③ 拥有自动维护的socket连接池，减少握手次数

④ 拥有队列线程池，轻松写并发

⑤ 拥有Interceptors轻松处理请求与响应（比如透明GZIP压缩,LOGGING）

⑥ 基于Headers的缓存策略

OKHttp源码位置https://github.com/square/okhttp
————————————————

Retrofit框架

Retrofit与okhttp共同出自于Square公司，retrofit就是对okhttp做了一层封装。把网络请求都交给给了Okhttp，我们只需要通过简单的配置就能使用retrofit来进行网络请求了。Retrofit框架存在的优势：

① Retrofit使用注解方式，大大简化了我们的URL拼写形式，而且注解含义一目了然，简单易懂；

② Retrofit使用简单，结构层次分明，每一步都能清晰的表达出之所以要使用的寓意；

④ Retrofit支持同步和异步执行，使得请求变得异常简单，只要调用enqueue/execute即可完成；

④ Retrofit更大自由度的支持我们自定义的业务逻辑，如自定义Converters。
————————————————


Okhttp：
OKHttp是一款高效的HTTP库，支持连接同一地址的链接共享同一个socket，通过连接池来减小响应延迟，还有透明的GZIP压缩，请求缓存等优势。OkHttp存在以下的特点：
① 支持HTTP2/SPDY 
② socket自动选择最好路线，并支持自动重连 
③ 拥有自动维护的socket连接池，减少握手次数 
④ 拥有队列线程池，轻松写并发 
⑤ 拥有Interceptors轻松处理请求与响应（比如透明GZIP压缩,LOGGING） 
⑥ 基于Headers的缓存策略
Retrofit:
Retrofit与okhttp共同出自于Square公司，retrofit就是对okhttp做了一层封装。把网络请求都交给给了Okhttp，我们只需要通过简单的配置就能使用retrofit来进行网络请求了。Retrofit框架存在的优势：
① Retrofit使用注解方式，大大简化了我们的URL拼写形式，而且注解含义一目了然，简单易懂；
② Retrofit使用简单，结构层次分明，每一步都能清晰的表达出之所以要使用的寓意；
③ Retrofit支持同步和异步执行，使得请求变得异常简单，只要调用enqueue/execute即可完成；
④ Retrofit更大自由度的支持我们自定义的业务逻辑，如自定义Converters。
⑤ Retrofit支持多种文件解析(Gson,Json,XML,Protobuf)
⑥ Retrofit支持RxJava

Okhttp 与 Retrofit的联系:
两者之间的联系就是Retrofit是基于Okhttp的，它底层的所有请求默认走的都是Okhttp。它在Okhttp的基础上进一步封装，使用注解方式让我们使用简单方便且看代码一目了然。Retrofit是基于APP发起请求的封装，也就是面向的是应用层(比如响应数据的处理和错误处理等)。而Okhttp是对底层网络请求的封装与优化(socket优化，数据压缩，buffer缓存等)。




为什么使用代理
　　我们在写一个功能函数时，经常需要在其中写入与功能不是直接相关但很有必要的代 码，如日志记录，信息发送，安全和事务支持等，这些枝节性代码虽然是必要的，但它会带来以下麻烦：

枝节性代码游离在功能性代码之外，它不是函数的目的，这是对OO是一种破坏

枝节性代码会造成功能性代码对其它类的依赖，加深类之间的耦合，可重用性降低

从法理上说，枝节性代码应该监视'着功能性代码，然后采取行动，而不是功能性代码 通知'枝节性代码采取行动，这好比吟游诗人应该是主动记录骑士的功绩而不是骑士主动要求诗人记录自己的功绩

常见的代理有:
远程代理(Remote Proxy)：对一个位于不同的地址空间对象提供一个局域代表对象，如RMI中的stub

虚拟代理(Virtual Proxy)：根据需要将一个资源消耗很大或者比较复杂的对象，延迟加 载，在真正需要的时候才创建

保护代理(Protect or Access Proxy)：控制对一个对象的访问权限。

智能引用(Smart Reference Proxy)：提供比目标对象额外的服务和功能。

定义
　　代理(Proxy)是一种设计模式,定义：为其他对象提供一个代理以控制对某个对象的访问，即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.
　　这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法
![](http://oo4l9ob6p.bkt.clouddn....
)
　　代理模式的关键点是:代理对象与目标对象.代理对象是对目标对象的扩展,并会调用目标对象
优缺点
在全面解析完代理模式后，我来分析下其优缺点：

3.1 优点
协调调用者和被调用者，降低了系统的耦合度
代理对象作为客户端和目标对象之间的中介，起到了保护目标对象的作用
3.2 缺点
由于在客户端和真实主题之间增加了代理对象，因此会造成请求的处理速度变慢；
实现代理模式需要额外的工作（有些代理模式的实现非常复杂），从而增加了系统实现的复杂度。
4. 应用场景
当需要为一个对象再不同的地址空间提供局部的代表时
此时的代理模式称为远程代理：为一个对象在不同的地址空间提供局部代表。
目的：

隐藏一个对象存在于不同地址空间的事实；
远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。
当需要创建开销非常大的对象时
此时的代理模式称为虚拟代理：通过使用过一个小的对象代理一个大对象。
目的：减少系统的开销。

当需要控制对原始对象的访问时
此时的代理模式称为保护代理：控制目标对象的访问，给不同用户提供不同的访问权限
目的：用来控制对真实对象的访问权限

当需要在访问对象时附加额外操作时
此时的代理模式称为智能引用代理，额外操作包括耗时操作、计算访问次数等等
目的：在不影响对象类的情况下，在访问对象时进行更多的操作

以上是最常用的使用场景，其他还包括：

防火墙代理：保护目标不让恶意用户靠近
Cache代理：为结果提供临时的存储空间，以便其他客户端调用
